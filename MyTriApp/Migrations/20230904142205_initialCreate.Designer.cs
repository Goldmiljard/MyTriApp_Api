// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyTriApp.Data;

#nullable disable

namespace MyTriApp.Migrations
{
    [DbContext(typeof(MyTriAppDbContext))]
    [Migration("20230904142205_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyTriApp.Data.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageCadence")
                        .HasColumnType("float");

                    b.Property<double>("AverageHeartRate")
                        .HasColumnType("float");

                    b.Property<double>("AverageSpeed")
                        .HasColumnType("float");

                    b.Property<double>("AverageWatts")
                        .HasColumnType("float");

                    b.Property<bool>("DeviceWatts")
                        .HasColumnType("bit");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("int");

                    b.Property<float>("EndLat")
                        .HasColumnType("real");

                    b.Property<float>("EndLng")
                        .HasColumnType("real");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasHeartRate")
                        .HasColumnType("bit");

                    b.Property<double>("Kilojoules")
                        .HasColumnType("float");

                    b.Property<string>("LocationCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxHeartRate")
                        .HasColumnType("int");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<int>("MaxWatts")
                        .HasColumnType("int");

                    b.Property<int>("MovingTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PRCount")
                        .HasColumnType("int");

                    b.Property<string>("SportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<float>("StartLat")
                        .HasColumnType("real");

                    b.Property<float>("StartLng")
                        .HasColumnType("real");

                    b.Property<long>("StravaId")
                        .HasColumnType("bigint");

                    b.Property<int>("SufferScore")
                        .HasColumnType("int");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalElevationGain")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UTCOffset")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeightedAverageWatts")
                        .HasColumnType("int");

                    b.Property<string>("WorkoutType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.StravaAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpiresAt")
                        .HasColumnType("int");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StravaAccessTokens");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.User", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExternalId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.StravaAccessToken", b =>
                {
                    b.HasOne("MyTriApp.Data.Entities.User", "User")
                        .WithOne("StravaAccessToken")
                        .HasForeignKey("MyTriApp.Data.Entities.StravaAccessToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.User", b =>
                {
                    b.Navigation("StravaAccessToken");
                });
#pragma warning restore 612, 618
        }
    }
}
