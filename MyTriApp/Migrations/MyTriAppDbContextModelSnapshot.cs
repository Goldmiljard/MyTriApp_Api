// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyTriApp.Data;

#nullable disable

namespace MyTriApp.Migrations
{
    [DbContext(typeof(MyTriAppDbContext))]
    partial class MyTriAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyTriApp.Data.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AverageCadence")
                        .HasColumnType("real");

                    b.Property<float>("AverageHeartrate")
                        .HasColumnType("real");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<int>("AverageTemp")
                        .HasColumnType("int");

                    b.Property<float>("AverageWatts")
                        .HasColumnType("real");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeviceWatts")
                        .HasColumnType("bit");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("int");

                    b.Property<float>("ElevHigh")
                        .HasColumnType("real");

                    b.Property<float>("ElevLow")
                        .HasColumnType("real");

                    b.Property<float>("EndLat")
                        .HasColumnType("real");

                    b.Property<float>("EndLng")
                        .HasColumnType("real");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GearDistance")
                        .HasColumnType("int");

                    b.Property<bool>("HasHeartrate")
                        .HasColumnType("bit");

                    b.Property<float>("Kilojoules")
                        .HasColumnType("real");

                    b.Property<float>("MaxHeartrate")
                        .HasColumnType("real");

                    b.Property<float>("MaxSpeed")
                        .HasColumnType("real");

                    b.Property<int>("MaxWatts")
                        .HasColumnType("int");

                    b.Property<int>("MovingTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Polyline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<float>("StartLat")
                        .HasColumnType("real");

                    b.Property<float>("StartLng")
                        .HasColumnType("real");

                    b.Property<long>("StravaId")
                        .HasColumnType("bigint");

                    b.Property<int>("SufferScore")
                        .HasColumnType("int");

                    b.Property<string>("SummaryPolyline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalElevationGain")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("UtcOffset")
                        .HasColumnType("real");

                    b.Property<int>("WeightedAverageWatts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.Lap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<float>("AverageCadence")
                        .HasColumnType("real");

                    b.Property<float>("AverageHeartrate")
                        .HasColumnType("real");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<float>("AverageWatts")
                        .HasColumnType("real");

                    b.Property<bool>("DeviceWatts")
                        .HasColumnType("bit");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("int");

                    b.Property<int>("EndIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LapIndex")
                        .HasColumnType("int");

                    b.Property<float>("MaxHeartrate")
                        .HasColumnType("real");

                    b.Property<float>("MaxSpeed")
                        .HasColumnType("real");

                    b.Property<int>("MovingTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SplitNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartIndex")
                        .HasColumnType("int");

                    b.Property<long>("StravaId")
                        .HasColumnType("bigint");

                    b.Property<float>("TotalElevationGain")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Lap");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.Split", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<float>("AverageSpeed")
                        .HasColumnType("real");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("ElapsedTime")
                        .HasColumnType("int");

                    b.Property<float>("ElevationDifference")
                        .HasColumnType("real");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MovingTime")
                        .HasColumnType("int");

                    b.Property<int>("PaceZone")
                        .HasColumnType("int");

                    b.Property<int>("SplitNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Split");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.StravaAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AthleteId")
                        .HasColumnType("bigint");

                    b.Property<int>("ExpiresAt")
                        .HasColumnType("int");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("int");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StravaAccessTokens");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.User", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExternalId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.Activity", b =>
                {
                    b.HasOne("MyTriApp.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.Lap", b =>
                {
                    b.HasOne("MyTriApp.Data.Entities.Activity", "Activity")
                        .WithMany("Laps")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.Split", b =>
                {
                    b.HasOne("MyTriApp.Data.Entities.Activity", "Activity")
                        .WithMany("Splits")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.StravaAccessToken", b =>
                {
                    b.HasOne("MyTriApp.Data.Entities.User", "User")
                        .WithOne("StravaAccessToken")
                        .HasForeignKey("MyTriApp.Data.Entities.StravaAccessToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.Activity", b =>
                {
                    b.Navigation("Laps");

                    b.Navigation("Splits");
                });

            modelBuilder.Entity("MyTriApp.Data.Entities.User", b =>
                {
                    b.Navigation("StravaAccessToken");
                });
#pragma warning restore 612, 618
        }
    }
}
